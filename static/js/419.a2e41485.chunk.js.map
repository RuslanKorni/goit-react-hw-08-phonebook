{"version":3,"file":"static/js/419.a2e41485.chunk.js","mappings":"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","sources":["../node_modules/clsx/dist/clsx.m.js","components/notifyOptions/notifyOptions.js","redux/contacts/selectors.js","components/FormList/FormList.jsx","components/ContatList/ContactList.styled.jsx","components/ContatList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Layout/Layout.styled.jsx","components/Layout/Title.jsx","pages/Contacts.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","export const notifyOptions = {\n    position: 'bottom-left',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'colored',\n  };\n","import { createSelector } from \"reselect\";\n\nexport const selectContacts = state => state.contacts.items; \n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter; \n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n      const normalizedFilter = filter.toLowerCase();\n  \n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  );","import { useEffect } from \"react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { fetchContacts, addContact } from \"../../redux/contacts/operations\";\nimport {useState} from 'react';\nimport { Form, Label, Input, Button, Span } from './FormList.styled';\nimport { toast } from 'react-toastify';\nimport { notifyOptions } from '../notifyOptions/notifyOptions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst FormList = () => {\nconst [name, setName] = useState('');\nconst [number, setNumber] = useState('');\n\nconst contacts = useSelector(selectVisibleContacts);\nconst dispatch = useDispatch();\n\nuseEffect(() => {\n  dispatch(fetchContacts());\n}, [dispatch]);\n\nconst handleSubmit = event => {\n  event.preventDefault();\n\n  const normalizedName = name.toLowerCase();\n  const isAdded = contacts.find(\n    el => el.name.toLowerCase() === normalizedName\n  );\n\n  if (isAdded) {\n    toast.error(`${name}: is already in contacts`, notifyOptions);\n    return;\n  }\n\n  dispatch(addContact({id: nanoid(), name, number }));\n  setName('');\n  setNumber('');\n};\n\nconst handleChange = e => {\n  const { name, value } = e.target;\n  switch (name) {\n    case 'name':\n      setName(value);\n      break;\n    case 'number':\n      setNumber(value);\n      break;\n    default:\n      return;\n  }\n};\n\n\n    return (\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Label>\n          <Span>Name</Span>\n          <Input\n            type=\"text\"\n            placeholder=\"Your name\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          <Span>Number</Span>\n          <Input\n            type=\"tel\"\n            placeholder=\"Your number\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add to contacts</Button>\n      </Form>\n    );\n  \n}\n\nexport default FormList;\n\n\n","import styled from '@emotion/styled';\n\n\nexport const ListWrap = styled.ul`\ndisplay: flex;\njustify-content: center;\nflex-direction: column;\n    align-items: center;\n`\nexport const List = styled.li`\ndisplay: flex;\nalign-items: center;\nmargin: 10px;\ngap: 50px;\n`\nexport const Paragraf = styled.p`\ncolor: black;\n`","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ListWrap, List } from './ContactList.styled';\nimport { Button } from 'components/FormList/FormList.styled';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ListWrap>\n      {contacts.map(({ id, name, number }) => (\n        <List key={id}>\n          {name + ' : ' + number}\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n        </List>\n      ))}\n    </ListWrap>\n  );\n};\n\nexport default ContactList;\n\n","import styled from '@emotion/styled'\n\nexport const FormFilter = styled.form`\ndisplay: flex;\njustify-content: center;\n`\nexport const LabelFilter = styled.label`\ncolor: #fff;\n`","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/filterSlice';\nimport {FormFilter, LabelFilter} from './Filter.styled';\nimport { Input } from 'components/FormList/FormList.styled';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n    return (\n      <FormFilter>\n        <LabelFilter>\n          <Input\n            type=\"name\"\n            value={value}\n            onChange={handleChange}\n            placeholder=\"Please enter a name to search\"\n          />\n        </LabelFilter>\n      </FormFilter>\n    );\n  };\n  \n  export default Filter;\n\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  display: block;\n  text-align: center;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  font-size: 36px;\n  color: black;\n`;","import PropTypes from 'prop-types';\nimport { Title } from './Layout.styled';\n\nconst GlobalTitle = ({ title }) => {\n  return (<Title>{title}</Title>);\n};\n\nGlobalTitle.propTypes = {\n    title: PropTypes.string.isRequired\n  }\n\n  export default GlobalTitle;\n","import { HelmetProvider } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport FormList from '../components/FormList/FormList';\nimport ContactList from '../components/ContatList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport GlobalTitle from '../components/Layout/Title';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <HelmetProvider>\n        <GlobalTitle title=\"Phonebook\" />\n        <FormList />\n        <GlobalTitle title=\"Contacts\" />\n        <Filter />\n        <ContactList />\n        <ToastContainer />\n      </HelmetProvider>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["r","e","t","f","n","Array","isArray","length","arguments","notifyOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","selectFilter","state","filter","selectVisibleContacts","createSelector","contacts","items","normalizedFilter","toLowerCase","contact","name","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","useEffect","fetchContacts","handleChange","_e$target","target","value","_jsxs","Form","onSubmit","event","preventDefault","normalizedName","find","el","toast","concat","addContact","id","nanoid","autoComplete","children","Label","_jsx","Span","Input","type","placeholder","onChange","pattern","title","required","Button","ListWrap","styled","_templateObject","_taggedTemplateLiteral","List","_templateObject2","_templateObject3","map","_ref","onClick","deleteContact","FormFilter","LabelFilter","changeFilter","Title","_Fragment","HelmetProvider","GlobalTitle","FormList","Filter","ContactList","ToastContainer"],"sourceRoot":""}